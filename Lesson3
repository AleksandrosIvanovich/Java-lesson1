package Lesson3;

public class Apple extends Fruit {

    Apple() {
        super(1.0f);
    }

    @Override
    public String toString(){
        return "яблоки";
    }
}
package Lesson3;

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class Box<T extends Fruit> {
    public List<T> getList() {
        return list;
    }
    private List<T> list;

    public Box(T... obj) {
        list = Arrays.asList(obj);
    }

    public Box() {
        list = new ArrayList<T>();
    }

    void add(T obj) {
        list.add(obj);
    }

    void moveAt(Box<T> box) {
       for (T obj : list) {
            box.add(obj);
        }
        box.getList().addAll(list);
        list.clear();
    }

    void info() {
        if (list.isEmpty()) {
            System.out.println("Коробка пуста");
        } else {
            System.out.println("В коробке находятся " + list.get(0).toString() + " в количестве: " + list.size());
        }
    }

    float getWeight() {
        if (list.isEmpty()) {
            return 0;
        } else {
            return list.size() * list.get(0).getWeight();
        }
    }

    boolean compare(Box<? extends Fruit> box) {
        return this.getWeight() == box.getWeight();
    }
}
package Lesson3;

public class Fruit {
    private float weight;

    Fruit(float weight) {
        this.weight = weight;
    }

    public float getWeight() {
        return weight;
    }
}
package Lesson3;

import java.util.Arrays;

/**
 * Java.Homework3
 *
 * @author Vrezh Sargsyan
 * @version 31.1.2022
 */

public class Main {


    public static void main(String[] args) {
        taskOne();
        taskTwo();
    }

        public static void taskOne() {

        String[] sarr = {"one", "two", "three", "four", "five"};
        Integer[] iarr = {1, 2, 3, 4, 5};

        System.out.println("Массив до перестановки: " + Arrays.toString(iarr));
        swapTwoElements(iarr, 1, 2);
        System.out.println("Массив после перестановки: " + Arrays.toString(iarr));

        System.out.println("Массив до перестановки: " + Arrays.toString(sarr));
        swapTwoElements(sarr, 0, 2);
        System.out.println("Массив после перестановки: " + Arrays.toString(sarr));
    }


    private static <T> void swapTwoElements(T[] array, int FirstNumPos, int SecondNumPos) {
        T temp = array[FirstNumPos];
        array[FirstNumPos] = array[SecondNumPos];
        array[SecondNumPos] = temp;
    }

        public static void taskTwo() {

        Orange orange = new Orange();
        Apple apple = new Apple();
        Box<Orange> orangeBox1 = new Box();
        Box<Orange> orangeBox2 = new Box();
        Box<Apple> appleBox = new Box();
        orangeBox1.add(new Orange());
        orangeBox1.add(new Orange());
        orangeBox1.add(new Orange());

        for (int i = 0; i < 4; i++) {
            orangeBox2.add(new Orange());
        }
        for (int i = 0; i < 6; i++) {
            appleBox.add(new Apple());
        }


        orangeBox1.info();
        orangeBox2.info();
        appleBox.info();

        Float orange1Weigth = orangeBox1.getWeight();
        Float orange2Weigth = orangeBox2.getWeight();
        Float appleWeigth = appleBox.getWeight();
        System.out.println("Вес коробки 1 с апельсинами: " + orange1Weigth);
        System.out.println("Вес коробки 2 с апельсинами: " + orange2Weigth);
        System.out.println("Вес коробки с яблоками: " + appleWeigth);

        System.out.println("Сравнить вес orangeBox1 и appleBox: " + orangeBox1.compare(appleBox));
        System.out.println("Сравнить вес orangeBox2 и appleBox: " + orangeBox2.compare(appleBox));

        orangeBox1.moveAt(orangeBox2);


        orangeBox1.info();
        orangeBox2.info();
        appleBox.info();
    }
} 
package Lesson3;

public class Orange  extends Fruit {

    Orange() {
        super(1.5f);
    }

    @Override
    public String toString(){
        return "апельсины";
    }
}
package Lesson3;

import java.util.Arrays;

public class GenArray<T> {

    public T[] array;

    @SafeVarargs
    public GenArray(T... array) {

        this.array = array;
    }

    @Override
    public String toString() {
        return "GenArray{" +
                "array=" + Arrays.toString(array) +
                '}';
    }

    public T[] getArray() {
        return array;
    }

    public void setArray(T[] array) {
        this.array = array;
    }


    public static void main(String[] args) {
        GenArray<Integer> integerGenArray1 = new GenArray<>(1, 2, 3, 4, 5, 6);

        GenArray<String> stringGenArray = new GenArray<>("one", "dva", "no", "tres", "wow");


            System.out.println("Массив до перестановки: " + integerGenArray1);
            System.out.println("Массив до перестановки: " + stringGenArray);
            swapTwoElementsInArray(new GenArray[]{integerGenArray1}, 1, 3);
            swapTwoElementsInArray(new GenArray[]{stringGenArray}, 0, 2);
            System.out.println("Массив после перестановки: " +Arrays.toString(new GenArray[]{integerGenArray1}));
            System.out.println("Массив после перестановки: " +Arrays.toString(new GenArray[]{stringGenArray}));

    }

    private static <S> void swapTwoElementsInArray(S[] array, int firstNumPos, int secondNumPos) {

        S temp = array[firstNumPos];
        array[firstNumPos] = array[secondNumPos];
        array[secondNumPos] = temp;
    }
} 
