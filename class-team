package Lesson1;

import java.util.Objects;

public abstract class Animal {
    private String name;
    private String color;
    private int age;
    private int jumpHeight;
    private int runLength;
    private int swimDistance;

    public Animal(String name, String color, int age, int jumpHeight, int runLength, int swimDistance) {
        this.name = name;
        this.color = color;
        this.age = age;
        this.jumpHeight = jumpHeight;
        this.runLength = runLength;
        this.swimDistance = swimDistance;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        if (age >= 0) this.age = age;
    }

    public int getJumpHeight() {
        return jumpHeight;
    }

    public void setJumpHeight(int jumpHeight) {
        this.jumpHeight = jumpHeight;
    }

    public int getRunLength() {
        return runLength;
    }

    public void setRunLength(int runLength) {
        this.runLength = runLength;
    }

    public int getSwimDistance() {
        return swimDistance;
    }

    public void setSwimDistance(int swimDistance) {
        this.swimDistance = swimDistance;
    }
}

package Lesson1;

public interface CanJump {

    double jump(int wall);

}
package Lesson1;

public interface CanRun {

    double run(int track);

}
package Lesson1;

public interface CanSwim {

    double swim(int pool);
}
ackage Lesson1;

public class Cat extends Animal implements Competitable {

    public Cat(String name, String color, int age, int jumpHeight, int runLength, int swimDistance) {
        super(name, color, age, jumpHeight, runLength, swimDistance);
    }

    @Override
    public double swim(int length) {
        if (length > getSwimDistance()) {
            System.out.println("Cat" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смогла проплыть");
        } else {
            System.out.println("Cat" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смогла проплыть!");
        }
        return 0;
    }

    @Override
    public double jump(int heigth) {
        if (heigth > getJumpHeight()) {
            System.out.println("Cat" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смогла перепрыгнуть");
        } else {
            System.out.println("Cat" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смогла перепрыгнуть!");
        }
        return 0;
    }

    @Override
    public double run(int length) {
        if (length > getRunLength()) {
            System.out.println("Cat" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смогла пробежать");
        } else {
            System.out.println("Cat" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смогла пробежать!");
        }
        return 0;
    }
}
package Lesson1;

public interface Competitable extends CanRun, CanJump, CanSwim{
}
package Lesson1;

public class Main {
    public static void main(String[] args) {
        Competitable[] competitors = {
                new Cat("Rosa", "red", 3, 1, 50, 5),
                new Wolf("Bari", "grey", 3, 5, 300, 30),
                new Turtle("Uri", "Green", 67, 0, 2, 100)
        };

        Overcomable[] overcomables = {new Wall(3), new Track(30), new Pool(10)};

        for (Competitable competitable : competitors) {
            for (Overcomable overcomable : overcomables) {
                overcomable.overcome(competitable);
            }
        }
    }
}
package Lesson1;

public interface Overcomable {
    public void overcome(Competitable competitable);
}
package Lesson1;

public class Pool implements Overcomable {

    private int length;

    public Pool(int length) {
        this.length = length;
    }

    public void overcome(Competitable competitable) {
        competitable.swim(length);
    }
}
package Lesson1;

public class Track implements Overcomable {

    private int length;

    public Track(int length) {
        this.length = length;
    }

    public void overcome(Competitable competitable) {
        competitable.run(length);
    }
}
package Lesson1;

public class Turtle extends Animal implements Competitable {

    public Turtle (String name, String color, int age, int jumpHeight, int runLength,  int swimDistance) {
        super(name, color, age, jumpHeight, runLength, swimDistance);
    }

    @Override
    public double swim(int length) {
        if (length > getSwimDistance()) {
            System.out.println("Turtle" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смогла проплыть");
        } else {
            System.out.println("Turtle" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смогла проплыть!");
        }
        return 0;
    }

    @Override
    public double jump(int heigth) {
        if (heigth > getJumpHeight()) {
            System.out.println("Turtle" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смогла перепрыгнуть");
        } else {
            System.out.println("Turtle" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смогла пепепрыгнуть!");
        }
        return 0;
    }

    @Override
    public double run(int length) {
        if (length > getRunLength()) {
            System.out.println("Turtle" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смогла пробежать");
        } else {
            System.out.println("Turtle" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смогла пробежать!");
        }
        return 0;
    }
}
package Lesson1;

public class Wolf extends Animal implements Competitable {

    public Wolf(String name, String color, int age, int jumpHeight, int runLength,  int swimDistance) {
        super(name, color, age, jumpHeight, runLength, swimDistance);
    }

    @Override
    public double swim(int length) {
        if (length > getSwimDistance()) {
            System.out.println("Wolf" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смог проплыть");
        } else {
            System.out.println("Wolf" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смог проплыть!");
        }
        return 0;
    }

    @Override
    public double jump(int heigth) {
        if (heigth > getJumpHeight()) {
            System.out.println("Wolf" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смог перепрыгнуть");
        } else {
            System.out.println("Wolf" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смог перепрыгнуть!");
        }
        return 0;
    }

    @Override
    public double run(int length) {
        if (length > getRunLength()) {
            System.out.println("Wolf" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " не смог пробежать");
        } else {
            System.out.println("Wolf" + " name= " + getName() + ", color= " + getColor() + ", age= " + getAge() + " смог пробежать!");
        }
        return 0;
    }
}
